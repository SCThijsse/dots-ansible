---
- name: Check if nvm script exists.
  ansible.builtin.stat:
    path: "{{ nvm_install_dir }}/nvm.sh"
  register: nvm_check

- name: Check nvm version.
  ansible.builtin.shell: ". {{ nvm_install_dir }}/nvm.sh && nvm --version"
  failed_when: false
  changed_when: false
  register: nvm_existing_version

- name: Install nvm.
  when: >
    not nvm_check.stat.exists
    or nvm_version not in nvm_existing_version.stdout
  block:
    - name: Remove current nvm installation.
      ansible.builtin.file:
        path: "{{ nvm_install_dir }}"
        state: absent

    - name: Download nvm install script.
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh"
        dest: /tmp
        mode: 0755
      register: nvm_script

    - name: Install nvm.
      ansible.builtin.command:
        cmd: "sh {{ nvm_script.dest }}"
        chdir: /tmp
        creates: "{{ nvm_install_dir }}/nvm.sh"
      environment:
        XDG_CONFIG_HOME: "{{ nvm_install_dir | dirname }}"

    - name: Cleanup nvm install script.
      ansible.builtin.file:
        path: "{{ nvm_script.dest }}"
        state: absent

- name: Install node & npm.
  ansible.builtin.shell:
    cmd: >
      . {{ nvm_install_dir }}/nvm.sh &&
      nvm install --default --no-progress --latest-npm {{ node_version }}
    creates: "{{ nvm_install_dir }}/versions/node/v{{ node_version }}"

- name: Install npm packages.
  community.general.npm:
    name: "{{ item }}"
    state: present
    global: true
  environment:
    PATH: "{{ nvm_install_dir }}/versions/node/v{{ node_version }}/bin"
  when: npm_installed_packages | length > 0
  loop: "{{ npm_installed_packages }}"

- name: Uninstall npm packages.
  community.general.npm:
    name: "{{ item }}"
    state: absent
    production: true
    global: true
  environment:
    PATH: "{{ nvm_install_dir }}/versions/node/v{{ node_version }}/bin"
  when: npm_uninstalled_packages | length > 0
  loop: "{{ npm_uninstalled_packages }}"
